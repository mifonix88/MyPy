class Wap():
    def __init__(self, object1):
        self.arg = object1

    def __getattr__(self, attrname):
        print('Trace: ' + attrname) # Трассировать извлечение
        return getattr(self.arg, attrname)

s = Wap([1,2,3])  # Создать оболочку для списка
s.append(4) # Делегировать списковому методу
print(s.arg)

q = Wap({'a':1,'b':2})  # Создать оболочку для словаря
print(q.keys()) # Делегировать словарному методу

'''
Совокупный эффект заключается в дополнении целого интерфейса объекта
arg добавочным кодом в классе Wap. Мы можем использовать его для регистрации
вызовов методов в журналах, направления вызовов методов дополнительной
или специальной логике, адаптации класса к новому интерфейсу и т.д.
'''


'''
В этом коде класс Wrapper перехватывает доступ к любым именованным атрибутам
внутреннего объекта, выводит трассировочное сообщение и применяет встроенную
функцию getattr для передачи запроса внутреннему объекту. В частности, он
отслеживает доступ к атрибутам, осуществляемый снаружи класса внутреннего объекта;
операции доступа внутри методов внутреннего объекта не перехватываются и выполняются
нормально по определению. Поведение такой модели полного интерфейса
отличается от поведения декораторов функций, которые оборачивают только один
конкретный метод.
'''
