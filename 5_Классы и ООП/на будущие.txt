Веб-сайты
Хотя графические пользовательские интерфейсы являются удобными и быстрыми,
веб-сеть трудно превзойти с точки зрения доступности. Для просмотра
и обновления записей мы могли бы также реализовать веб-сайт взамен или в
дополнение к графическому пользовательскому интерфейсу и интерактивной
подсказке. Веб-сайты можно создавать с помощью либо базовых инструментов
для написания сценариев CGI, имеющихся в составе Python, либо полномасштабных
сторонних веб-фреймворков вроде Django, TurboGears, Pylons, web2Py,
Zope или Google Арр Engine. В веб-сети ваши данные по-прежнему могут находиться
в хранилище shelve, в файле pickle или в другой среде, основанной на
Python. Сценарии обработки данных запускаются автоматически на сервере в
ответ на запросы из веб-браузеров и других клиентов, и они производят HTML-
разметку для взаимодействия с пользователем, либо напрямую, либо через API-
интерфейсы фреймворка. Системы обогащенных Интернет-приложений (Rich
Internet application — RIA), такие как Silverlight и pyjamas, также пытаются объединить
взаимодействие, подобное обеспечиваемому графическими пользовательскими
интерфейсами, с развертыванием в веб-сети.
Глава 28. Более реалистичный пример 91

Веб-службы
Хотя веб-клиенты часто способны проводить разбор информации в ответах от
веб-сайтов (методика, красочно называемая “анализом экранных данных”), мы
могли бы двинуться дальше и обеспечить более прямой способ извлечения записей
через веб-сеть посредством интерфейса веб-служб, такого как SOAP или вызовы
XML-RPC — API-интерфейсов, поддерживаемых либо самим Python, либо
сторонними инструментами с открытым кодом, которые в целом отображают
данные в формат XML и обратно с целью передачи. Для сценариев на Python
подобного рода API-интерфейсы возвращают данные более непосредственно,
чем текст, внедренный в HTML-разметку страницы ответа.

Базы данных
Если наша база данных становится объемной или важной, тогда со временем мы
могли бы перейти от модуля shelve к более полнофункциональному механизму
хранения. Им может быть система управления объектно-ориентированными базами
данных с открытым кодом ZODB или более традиционная система управления
реляционными базами данных на основе SQL, такая как MySQL, Oracle
или PostgreSQL. Сам Python поставляется со встроенным модулем внутрипроцессной
системы управления базами данных SQLite, но в веб-сети свободно доступны
другие варианты с открытым кодом. Например, система ZODB похожа
на модуль shelve из Python, но лишена множества его ограничений, лучше поддерживает
крупные базы данных, параллельные обновления, обработку транзакций
и автоматическую сквозную запись при изменениях в памяти (хранилища
shelve могут кешировать объекты и сбрасывать их на диск во время закрытия
посредством параметра writeback, но с этим связаны ограничения). Системы
на основе SQL, подобные MySQL, предлагают инструменты производственного
уровня для хранилища в виде базы данных и могут напрямую применяться в
сценарии на Python. Как известно из главы 9 первого тома, MongoDB обеспечивает
альтернативный подход, предусматривающий хранение документов JSON,
которые близко напоминают словари и списки Python, но в отличие от данных
pickle нейтральны к языку.

Средства объектнореляционного отображения
В случае перевода хранилища на систему правления реляционными базами данных
мы не должны приносить в жертву инструменты ООП в Python. Средства
объектно-реляционного отображения (object-relational mapper — ORM) вроде
SQLObject и SQLAlchemy способны автоматически отображать реляционные
таблицы и строки на классы и экземпляры Python и обратно, так что мы можем
обрабатывать сохраненные данные с использованием нормального синтаксиса
классов Python. Такой подход предлагает альтернативу системам управления
объектно-ориентированными базами данных наподобие shelve и ZODB